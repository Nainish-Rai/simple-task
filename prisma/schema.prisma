generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model user {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  created_time      DateTime @default(now())
  email             String   @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String   @unique
  subscription      String?
  // Existing relations
  bookmarks         bookmark[]
  notes             note[]
  todos             todo[]
  weatherPrefs      weatherPreference[]
  aiChats          aiChat[]
  // New relations for calendar functionality
  calendarEvents    calendarEvent[]
  calendarAccounts  calendarAccount[]
  availability      availability[]
}

model bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  title     String
  url       String
  category  String?
  createdAt DateTime @default(now())
}

model note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  title     String?
  content   String
  tags      String[]
  createdAt DateTime @default(now())
}

model todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  task      String
  dueDate   DateTime?
  priority  String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model weatherPreference {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  location  String
  units     String   @default("metric")
}

model aiChat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  message   String
  response  String?
  createdAt DateTime @default(now())
}

type RecurrenceRule {
  freq      String    // "DAILY", "WEEKLY", "MONTHLY", "YEARLY"
  interval  Int?      // Every X days/weeks/months/years
  until     DateTime? // End date
  count     Int?      // Number of occurrences
  byDay     String[]  // ["MO", "WE", "FR"]
  byMonth   Int[]     // [1, 6, 12]
  byMonthDay Int[]    // [1, 15, -1]
}

type ExternalIds {
  googleEventId   String?
  outlookEventId  String?
  calendarId      String?
  calendarName    String?
}

type Attendee {
  email     String
  name      String?
  response  String? // "accepted", "declined", "tentative", "needsAction"
}

type Attachment {
  fileName    String
  fileSize    Int
  fileType    String
  url         String
  uploadedAt  DateTime
}

type AgendaItem {
  title       String
  duration    Int?      // in minutes
  presenter   String?
  notes       String?
  status      String    // "pending", "completed", "skipped"
}

type Comment {
  id          String
  userId      String
  content     String
  createdAt   DateTime
  updatedAt   DateTime
}

type MeetingIntegration {
  provider    String    // "google_meet", "zoom"
  meetingUrl  String
  meetingId   String?
  password    String?
  settings    Json?
}

model calendarEvent {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        user      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  status      String    @default("confirmed")
  isAllDay    Boolean   @default(false)
  recurrence  RecurrenceRule?
  reminders   reminder[]
  externalIds ExternalIds?
  attendees   Attendee[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // New fields
  colorCode           String?
  priority            String?    @default("medium")  // "low", "medium", "high"
  meetingIntegration  MeetingIntegration?
  attachments         Attachment[]
  notes               String?    // Markdown supported
  agendaItems         AgendaItem[]
  comments            Comment[]
  tags               String[]
  isPrivate          Boolean    @default(false)
  category           String?
  notifyChanges      Boolean    @default(true)

  // Indexes
  @@index([startTime, endTime])
  @@index([userId, startTime])
  @@index([priority, startTime])
  @@index([tags])
}

model calendarAccount {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          user     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  provider      String
  accountEmail  String
  accessToken   String
  refreshToken  String
  expiry        DateTime
  calendarIds   String[]
  isPrimary     Boolean  @default(false)
  lastSynced    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId, provider])
  @@unique([userId, accountEmail])
}

model reminder {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  event           calendarEvent @relation(fields: [eventId], references: [id])
  eventId         String        @db.ObjectId
  reminderType    String
  minutesBefore   Int
  status          String        @default("pending")
  createdAt       DateTime      @default(now())

  @@index([eventId, status])
}

model availability {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        user     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  dayOfWeek   Int
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, dayOfWeek])
  @@unique([userId, dayOfWeek, startTime, endTime])
}