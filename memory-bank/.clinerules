# Cline Learning Rules

## Core Rules

1. TYPE SAFETY

   - Always use TypeScript for type definitions
   - Avoid using 'any' type
   - Maintain strict TypeScript configuration
   - Use proper types for MongoDB documents and queries

2. COMPONENT ARCHITECTURE

   - Follow atomic design principles
   - Keep components small and focused
   - Use shadcn/ui as foundation

3. STATE MANAGEMENT

   - Use React Context for global state
   - Keep state close to where it's used
   - Implement proper state isolation

4. DATABASE PATTERNS

   - Use Mongoose schemas for data modeling
   - Implement proper indexing for MongoDB collections
   - Follow MongoDB best practices for querying
   - Handle MongoDB operations asynchronously

5. PERFORMANCE
   - Lazy load components when possible
   - Optimize MongoDB queries
   - Monitor database performance
   - Optimize images and assets
   - Monitor and optimize bundle size

## Learned Patterns

### Effective Patterns

1. MongoDB Data Modeling

   - Design schemas for document-based structure
   - Use appropriate data types
   - Implement proper validation
   - Plan indexes for common queries

2. Data Fetching

   - Use SWR for data fetching
   - Implement proper loading states
   - Handle error cases explicitly
   - Cache MongoDB query results when appropriate

3. Animation Implementation
   - Use Framer Motion for complex animations
   - Keep animations subtle and purposeful
   - Ensure animations don't impact performance

### Anti-Patterns to Avoid

1. Prop Drilling

   - Use Context or state management instead
   - Keep component hierarchy shallow
   - Pass only necessary props

2. Poor MongoDB Practices

   - Avoid nested arrays without limits
   - Don't skip schema validation
   - Prevent unbounded document growth
   - Avoid blocking operations

3. Premature Optimization
   - Profile before optimizing
   - Focus on user-facing performance
   - Optimize only when necessary

## Best Practices

1. CODE ORGANIZATION

   - Follow established folder structure
   - Keep related files together
   - Use clear, consistent naming
   - Organize MongoDB models logically

2. TESTING

   - Write tests for critical paths
   - Test MongoDB operations
   - Maintain good test coverage
   - Use appropriate testing patterns

3. DOCUMENTATION
   - Document complex logic
   - Document database schemas
   - Keep documentation updated
   - Use JSDoc for type definitions

## Adaptation Rules

1. FEATURE DEVELOPMENT

   - Start with requirements analysis
   - Create technical design doc
   - Plan data model structure
   - Get early feedback

2. CODE REVIEW

   - Review for type safety
   - Check MongoDB query performance
   - Check for performance impacts
   - Ensure documentation is updated

3. DATABASE OPERATIONS
   - Use proper error handling
   - Implement retry mechanisms
   - Monitor query performance
   - Follow MongoDB best practices

## Error Handling

1. DATABASE ERRORS

   - Handle MongoDB connection issues
   - Implement retry mechanisms
   - Log errors for debugging
   - Provide fallback behavior

2. UI ERRORS

   - Use error boundaries
   - Provide fallback UI
   - Maintain app stability

3. TYPE ERRORS
   - Address TypeScript errors immediately
   - Don't suppress type checks
   - Document type decisions
   - Ensure proper MongoDB types

This document is continuously updated as new patterns emerge and best practices evolve.

Last Updated: 2025-02-12 18:07
